
(B[mtemplate.sh
   brief description . . .

[1mUSAGE(B[m
   template.sh [-c <CLUSTER>] [-d <DATA_DIR>] [-a <ADMUSER>] [-f <PATH>/<FILE_NAME>]

   template.sh [--help | -help | help | -h | h | -?]
   template.sh [--usage | -usage | -u]
   template.sh [--version | -version | -v]

[1mDESCRIPTION(B[m
<your help goes here>
>>> NEED TO COMPLETE THIS SOON, ONCE I KNOW HOW IT IS GOING TO WORK :-) <<<    |

<<Paragraph two>>

The <DATA_DIR>/<CLUSTER>/<SYSTEMS_FILE> includes one FQDN or IP address per
line for all hosts in the cluster.  Lines in <SYSTEMS_FILE> that begin with a
'#' are comments.  The <SYSTEMS_FILE> is used by markit/find-code.sh,
Linux-admin/cluster-command/cluster-command.sh, docker-TLS/copy-registry-tls.sh,
pi-display/create-message/create-display-message.sh, and other scripts.  A
different <SYSTEMS_FILE> can be entered on the command line or environment
variable.

This script works for the local host only.  To use check-host-tls.sh on a
remote hosts (one-rpi3b.cptx86.com) with ssh port of 12323 as uadmin user;
	[1mssh -tp 12323 uadmin@one-rpi3b.cptx86.com 'sudo check-host-tls.sh'(B[m
To loop through a list of hosts in the cluster use,
https://github.com/BradleyA/Linux-admin/tree/master/cluster-command
	[1mcluster-command.sh special 'sudo check-host-tls.sh'(B[m

The administration user may receive password and/or passphrase prompts from a
remote systen; running the following may stop the prompts in your cluster.
	[1mssh-copy-id <TLS_USER>@<REMOTE_HOST>(B[m
or
	[1mssh-copy-id <TLS_USER>@<192.168.x.x>(B[m
If that does not resolve the prompting challenge then review the man pages for
ssh-agent and ssh-add before entering the following in a terminal window.
	[1meval $(ssh-agent)(B[m
	[1mssh-add(B[m

[1mENVIRONMENT VARIABLES(B[m
If using the bash shell, enter; 'export DEBUG=1' on the command line to set
the DEBUG environment variable to '1' (0 = debug off, 1 = debug on).  Use the
command, 'unset DEBUG' to remove the exported information from the DEBUG
environment variable.  You are on your own defining environment variables if
you are using other shells.
   DEBUG           (default off '0')
   CLUSTER         Cluster name (default 'us-tx-cluster-1/')
   DATA_DIR        Data directory (default '/usr/local/data/')
   SYSTEMS_FILE    Hosts in cluster (default 'SYSTEMS')

[1mOPTIONS(B[m
Order of precedence: CLI options, environment variable, default code.

   -c, --cluster, -c=, --cluster=<CLUSTER>
	Cluster name (default 'us-tx-cluster-1/')

   -d, --datadir, -d=, --datadir=<DATA_DIR>
	Data directory (default '/usr/local/data/')

   -a, --admuser, -a=, --admuser=<ADMUSER>
	Site SRE administrator, default is user running script

   -f, --file, -f=, --filename=<FILENAME>
	Path and file on system '<path>/<file_name>'

   -S, --ssh_user, -S=, --ssh_user=<SSH_USER>
	Location of user home directory (default /home/)

   -U, --user_home, -U=, --user_home=<USER_HOME>
   

[1mARCHITECTURE TREE(B[m
/usr/local/data/                           <-- <DATA_DIR>
â”œâ”€â”€ <CLUSTER>/                             <-- <CLUSTER>
â”‚   â”œâ”€â”€ docker/                            <-- Root directory of persistent
â”‚   â”‚   â”‚                                      Docker state files; (images)
â”‚   â”‚   â””â”€â”€ ######.######/                 <-- Root directory of persistent
â”‚   â”‚                                          Docker state files; (images)
â”‚   â”‚                                          when using user namespace
â”‚   â”œâ”€â”€ SYSTEMS                            <-- List of hosts in cluster
â”‚   â”œâ”€â”€ log/                               <-- Host log directory
â”‚   â”œâ”€â”€ logrotate/                         <-- Host logrotate directory
â”‚   â”œâ”€â”€ docker-accounts/                   <-- Docker TLS certs
â”‚   â”‚   â”œâ”€â”€ <HOST-1>/                      <-- Host in cluster
â”‚   â”‚   â”‚   â”œâ”€â”€ ssh/
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ AllowUsers             <-- User name patterns allowed
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ssh_host_ed25519_fingerprint <-- XXXX think about only having one finger print file for all called fingerprint keytype
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ssh_host_rsa_fingerprint <-- 
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ssh_known_hosts        <-- Host public keys for all
â”‚   â”‚   â”‚   â”‚   â”‚                              known hosts in cluster
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ shosts.equiv           <-- 
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ssh_host_rsa_key       <-- OpenSSH host private key
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ssh_host_rsa_key.pub   <-- OpenSSH host public key
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ssh_host_ed25519_key   <-- OpenSSH host private key
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ssh_host_ed25519_key.pub <-- OpenSSH host public key
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ keys/
â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ <USER-1>/
â”‚   â”‚   â”‚   â”‚       â”‚   â””â”€â”€ authorized_keys
â”‚   â”‚   â”‚   â”‚       â””â”€â”€ <USER-2>/
â”‚   â”‚   â”‚   â”œâ”€â”€ <USER-1>/                  <-- User TLS certs directory
â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ docker         FUTURE  <-- User tlscacert
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ ca.pem     FUTURE  <-- User tlscacert
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ cert.pem   FUTURE  <-- User tlscert
â”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ key.pem    FUTURE  <-- User tlskey
â”‚   â”‚   â”‚   â”‚   â”‚   â””â”€â”€ trust/             <-- Backup of Docker Content Trust
â”‚   â”‚   â”‚   â”‚   â”‚                              (DCT) keys
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ ssh/
â”‚   â”‚   â”‚   â”‚       â”œâ”€â”€ authorized_keys    <-- SSH user public keys for login 644
â”‚   â”‚   â”‚   â”‚       â””â”€â”€ inventory/ FUTURE  <-- SSH user inventory
â”‚   â”‚   â”‚   â””â”€â”€ <USER-2>/                  <-- User TLS certs directory
â”‚   â”‚   â””â”€â”€ <HOST-2>/                      <-- Host in cluster
â”‚   â””â”€â”€ docker-registry/                   <-- Docker registry directory
â”‚       â”œâ”€â”€ <REGISTRY_HOST>-<REGISTRY_PORT>/ < Registry container mount
â”‚       â”‚   â”œâ”€â”€ certs/                     <-- Registry cert directory
â”‚       â”‚   â”‚   â”œâ”€â”€ domain.crt             <-- Registry cert
â”‚       â”‚   â”‚   â””â”€â”€ domain.key             <-- Registry private key
â”‚       â”‚   â””â”€â”€ docker/                    <-- Registry storage directory
â”‚       â”œâ”€â”€ <REGISTRY_HOST>-<REGISTRY_PORT>/ < Registry container mount
â”‚       â””â”€â”€ <REGISTRY_HOST>-<REGISTRY_PORT>/ < Registry container mount
â””â”€â”€ <STANDALONE>/                          <-- <STANDALONE> Architecture tree
                                               is the same as <CLUSTER> TREE but
                                               the systems are not in a cluster

<USER_HOME>/                               <-- Location of user home directory
â”œâ”€â”€ <USER-1>/.docker/                      <-- User docker cert directory
â”‚   â”œâ”€â”€ ca.pem                             <-- User tlscacert or symbolic link
â”‚   â”œâ”€â”€ cert.pem                           <-- Symbolic link to user tlscert
â”‚   â”œâ”€â”€ key.pem                            <-- Symbolic link to user tlskey
â”‚   â”œâ”€â”€ docker-ca/                         <-- Working directory to create certs
â”‚   â”œâ”€â”€ trust/                             <-- Docker Content Trust (DCT)
â”‚   â”‚   â”œâ”€â”€ private/                       <-- Notary Canonical Root Key ID
â”‚   â”‚   â”‚                                      (DCT Root Key)
â”‚   â”‚   â”œâ”€â”€ trusted_certificates/          <-- Docker Content Trust (DCT) keys
â”‚   â”‚   â””â”€â”€ tuf/                           <-- Update Framework (TUF)
â”‚   â”œâ”€â”€ registry-certs-<REGISTRY_HOST>-<REGISTRY_PORT>/ <-- Working directory
â”‚   â”‚   â”‚                                      to create registory certs
â”‚   â”‚   â”œâ”€â”€ ca.crt                         <-- Daemon registry domain cert
â”‚   â”‚   â”œâ”€â”€ domain.crt                     <-- Registry cert
â”‚   â”‚   â””â”€â”€ domain.key                     <-- Registry private key
â”‚   â”œâ”€â”€ registry-certs-<REGISTRY_HOST>-<REGISTRY_PORT>/ <-- Working directory
â”‚   â”‚                                          to create registory certs
â”‚   â””â”€â”€ registry-certs-<REGISTRY_HOST>-<REGISTRY_PORT>/ <-- Working directory
â”‚                                              to create registory certs
â””â”€â”€ <USER-1>/.ssh/                         <-- Secure Socket Shell directory
    â”œâ”€â”€ authorized_keys                    <-- SSH keys for logging into account
    â”œâ”€â”€ config                             <-- SSH user configuration file
    â”œâ”€â”€ id_rsa                             <-- SSH private key
    â”œâ”€â”€ id_rsa.pub                         <-- SSH public key
    â””â”€â”€ known_hosts                        <-- Systems previously connected to

/etc/ 
â”œâ”€â”€ docker/ 
â”‚   â”œâ”€â”€ certs.d/                           <-- Host docker cert directory
â”‚   â”‚   â”œâ”€â”€ daemon/                        <-- Daemon cert directory
â”‚   â”‚   â”‚   â”œâ”€â”€ ca.pem                     <-- Daemon tlscacert
â”‚   â”‚   â”‚   â”œâ”€â”€ cert.pem                   <-- Daemon tlscert
â”‚   â”‚   â”‚   â””â”€â”€ key.pem                    <-- Daemon tlskey
â”‚   â”‚   â”œâ”€â”€ <REGISTRY_HOST>:<REGISTRY_PORT>/ < Registry cert directory
â”‚   â”‚   â”‚   â””â”€â”€ ca.crt                     <-- Daemon registry domain cert
â”‚   â”‚   â”œâ”€â”€ <REGISTRY_HOST>:<REGISTRY_PORT>/ < Registry cert directory
â”‚   â”‚   â””â”€â”€ <REGISTRY_HOST>:<REGISTRY_PORT>/ < Registry cert directory
â”‚   â”œâ”€â”€ daemon.json                        <-- Daemon configuration file
â”‚   â”œâ”€â”€ key.json                           <-- Automatically generated dockerd
â”‚   â”‚                                          key for TLS connections to other
â”‚   â”‚                                          TLS servers
â”‚   â”œâ”€â”€ 10-override.begin                  <-- docker.service.d default lines
â”‚   â”œâ”€â”€ dockerd-configuration-file         <-- Daemon configuration
â”‚   â”œâ”€â”€ dockerd-configuration-file.service <- runs start-dockerd-with-systemd.sh
â”‚   â”‚                                          during boot
â”‚   â”œâ”€â”€ docker.org                         <-- Copy of /etc/default/docker
â”‚   â”œâ”€â”€ README.md
â”‚   â”œâ”€â”€ setup-dockerd.sh                   <-- moves and creates files
â”‚   â”œâ”€â”€ start-dockerd-with-systemd.begin   <-- Beginning default lines
â”‚   â”œâ”€â”€ start-dockerd-with-systemd.end     <-- Ending default lines
â”‚   â”œâ”€â”€ start-dockerd-with-systemd.sh
â”‚   â””â”€â”€ uninstall-dockerd-scripts.sh       <-- Removes files and scripts
â”œâ”€â”€ systemd/system/                        <-- Local systemd configurations
â”‚   â”œâ”€â”€ dockerd-configuration-file.service <-- Runs start-dockerd-with-systemd.sh
â”‚   â”œâ”€â”€ docker.service.d/
â”‚   â”‚   â””â”€â”€ 10-override.conf               <-- Override configutation file
â”‚   â””â”€â”€ docker.service.wants/              <-- Dependencies
â”œâ”€â”€ default/
â”‚   â””â”€â”€ docker                             <-- Docker daemon Upstart and
â”‚                                              SysVinit configuration file
â”œâ”€â”€ ssl/
â”‚   â””â”€â”€ openssl.cnf                        <-- OpenSSL configuration file
â”œâ”€â”€ ssh/
â”‚   â”œâ”€â”€ moduli                             <-- Diffie-Hellman moduli
â”‚   â”œâ”€â”€ shosts.equiv                       <-- host-based authentication
â”‚   â”œâ”€â”€ ssh_config                         <-- OpenSSH systemwide configuration
â”‚   â”‚                                          file
â”‚   â”œâ”€â”€ sshd_config                        <-- OpenSSH daemon configuration
â”‚   â”‚                                          file
â”‚   â”œâ”€â”€ ssh_host_rsa_key                   <-- OpenSSH host private key
â”‚   â”œâ”€â”€ ssh_host_rsa_key.pub               <-- OpenSSH host public key
â”‚   â”œâ”€â”€ ssh_host_ed25519_key               <-- OpenSSH host private key
â”‚   â”œâ”€â”€ ssh_host_ed25519_key.pub           <-- OpenSSH host public key
>>> NEED TO COMPLETE THIS SOON, ONCE I KNOW HOW IT IS GOING TO WORK :-) <<<    |
â”‚   â”œâ”€â”€ ssh_known_hosts                    <-- OpenSSH systemwide list of known
â”‚   â”‚                                          public host keys
â”‚   â””â”€â”€ keys                               <-- Support SSH remote login when
â”‚       â”‚                                      user home directory encrypted
â”‚       â”œâ”€â”€ <USER-1>/                      <-- User SSH authorized_keys directory 755
â”‚       â”‚   â””â”€â”€ authorized_keys            <-- SSH user public keys for login 644
â”‚       â””â”€â”€ <USER-2>/                      <-- User systemwide SSH directory
â””â”€â”€ hosts.equiv                            <-- host-based authentication

/var/
â”œâ”€â”€ lib/docker/                            <-- Root directory of persistent
â”‚                                              Docker state files; (images)
â”‚                                              changed to symbolic link pointing
â”‚                                              to <DATA_DIR>/<CLUSTER>/docker
â””â”€â”€ run/
    â”œâ”€â”€ docker/                            <-- Root directory for Docker
    â”‚                                          execution state files
    â”œâ”€â”€ docker.pid                         <-- Docker daemon PID file
    â””â”€â”€ docker.######.######/              <-- Root directory for Docker
                                               execution state files using
                                               user namespace

[1mDOCUMENTATION(B[m
   https://github.com/BradleyA/   <<URL to online repository README>>

[1mEXAMPLES(B[m
   <<your code examples description goes here>>
	[1mtemplate.sh <<code example goes here>>(B[m
   <<your code examples description goes here>>
	[1mtemplate.sh(B[m
